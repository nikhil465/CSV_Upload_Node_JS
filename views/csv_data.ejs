<link rel="stylesheet" href="/css/csv_data.css">
<div class="container">
    <h1>CSV Data Display</h1>

    <div class="search-container">
        <input type="text" id="searchInput" placeholder="Search by column...">
    </div>

    <table id="dataTable">
        <thead>
            <tr>
                <% for (let header of csvHeaders) { %>
                    <th>
                        <div class="column-header">
                            <span><%= header %></span>
                        </div>
                        <button class="sort-button" data-column="<%= header %>">
                            <span class="sort-icon">&#9650;</span>
                            <span class="sort-icon">&#9660;</span>
                        </button>
                        
                    </th>
                <% } %>
            </tr>
        </thead>
        <tbody>
            <% for (let row of csvData) { %>
                <tr>
                    <% for (let value of Object.values(row)) { %>
                        <td><%= value %></td>
                    <% } %>
                </tr>
            <% } %>
        </tbody>
    </table>

    <div class="pagination-container">
        <button id="prevPage">Previous</button>
        <span id="currentPage">Page 1</span>
        <button id="nextPage">Next</button>
    </div>
</div>

<script>
    const dataTable = document.getElementById('dataTable');
    const searchInput = document.getElementById('searchInput');
    const prevPageButton = document.getElementById('prevPage');
    const nextPageButton = document.getElementById('nextPage');
    const currentPageSpan = document.getElementById('currentPage');
    const sortButtons = document.querySelectorAll('.sort-button');
    const rowsPerPage = 100;

    let currentPage = 1;
    let filteredData = [...<%- JSON.stringify(csvData) %>]; // Replace csvData with your actual data
    console.log(filteredData);
    // Sorting function for ascending order
    function sortAscending(columnIndex) {
        filteredData.sort((a, b) => a[columnIndex].localeCompare(b[columnIndex]));
    }

    // Sorting function for descending order
    function sortDescending(columnIndex) {
        filteredData.sort((a, b) => b[columnIndex].localeCompare(a[columnIndex]));
    }

    // Update the table with filtered data based on search input, current page, and sorting
    function updateTable() {
        const searchText = searchInput.value.toLowerCase();
        const startIdx = (currentPage - 1) * rowsPerPage;
        const endIdx = startIdx + rowsPerPage;

        const filteredRows = filteredData.filter(row =>
            Object.values(row).some(value =>
                typeof value === 'string' && value.toLowerCase().includes(searchText)
            )
        );

        const paginatedRows = filteredRows.slice(startIdx, endIdx);

        dataTable.querySelector('tbody').innerHTML = paginatedRows
            .map(row =>
                `<tr>${Object.values(row)
                    .map(value => `<td>${value}</td>`)
                    .join('')}</tr>`
            )
            .join('');

        currentPageSpan.textContent = `Page ${currentPage}`;
    }

    // Sorting event listeners
    sortButtons.forEach(button => {
        button.addEventListener('click', () => {
            const columnIndex = button.getAttribute('data-column');
            const isDescending = button.classList.toggle('desc');

            if (isDescending) {
                sortDescending(columnIndex);
            } else {
                sortAscending(columnIndex);
            }

            updateTable();
        });
    });

    // Pagination event listeners
    prevPageButton.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            updateTable();
        }
    });

    nextPageButton.addEventListener('click', () => {
        if (currentPage < Math.ceil(filteredData.length / rowsPerPage)) {
            currentPage++;
            console.log(currentPage);
            updateTable();
        }
    });

    // Search input event listener
    searchInput.addEventListener('input', () => {
        currentPage = 1;
        updateTable();
    });

    // Initial table update
    updateTable();
</script>